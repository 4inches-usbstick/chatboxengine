DOC EXPLANATIONS:
cbedata and cbedata.py: explaining CBEDATA
pythonfunctions.txt: how to use chatboxengine.py
api.txt: API docs
change.txt: refresh rate explanation
flash.txt: flashing images trigger warning
control.txt: unused
htmlhelp.txt: explaining HTML chatboxes
explanation_and_installation.txt: installation instructions and documentation explanation


INSTALLATION INSTRUCTIONS:
This Read Me has the instructions for setting up Chatbox Engine for your server. 

--PART ZERO: PRE REQS--
You need the following things:

-an HTTP server 
-PHP 7+
-A C++ compiler (needed for PHP and some server software)
-text editor

Make sure to read and understand the license before using Chatbox Engine.


--Initial Config--
You'll need to create a directory named textengineon the server. Remember the path to this directory, you'll need it later. Next, in that new dir, make a folder named sitechats. Extract the ZIP into sitechats.

(yes you should use those dir names)

Next, make sure your server protects all files with .hta* as the extension. All the hidden and somewhat important files are .hta* files, so its imperative that you do this.

Now, open .htamainpolicy with your favorite text editor and change these things in the config file:

PID  Change to
1    Your server's IP or domain name
3    Path to textengine (a folder with sitechats in it) dir without / on the end
5    Where Chatboxes should be copied when someone uses XCOPY, no / on the end
7    Where Chatbox Media dirs should be copied when someone uses MCOPY, no / on the end
9    Correct PHP timezone
11   Max upload file size in bytes. *
13   Allow media upload (YES to allow, NO to forbid)
15   Allow LOADEXE command (YES to allow, NO to forbid)
17   Allow users to name their own files (YES to allow, NO to forbid)
19   Use inchat_joinpage or joinchatpublic (YES for inchat_joinpage, NO for joinchatpublic)
21   Enable API (YES to unlock API and NO if you want everything to break)
23   Do TS checking (YES to enable timestamps, NO to disable all timestamps)
25   The filepath to the file that controls banned IP addresses, no / on the end (i.e. .htaccess).
27   What you would put into the aforementioned file to ban an IP. **
29   Banned phrases (use // to separate each word, i.e. "f*ck//sh*t//bit*h")
31   Illegal destintation Chatboxes. Use '.extension' to protect certain extensions (i.e. '.php//.py').
33   Whether or not to convert encodings upon request. (YES for convert, NO for don't convert)
35   Whether or not you want to allow Admin to remotely edit .htamainpolicy (YES for allow, NO for forbid).
37   PHP suppress errors in the terminal. 0 for suppress, and E_ALL for don't.
39   Read the notes on PID 39 in the config file.
41   If the editing terminal needs the master key, YES for master and NO for master or uidukey.
43   Allow HTTP POST for sendmsg, YES for allow and NO for forbid.
45   Where to log terminal commands, needs a filepath (relative or absolute both OK).
47   Whether to terminal log, YES for log and NO for don't log.
49   Which commands to not log, separated by commas
51   Whether managing the CBauth list requires master key or not, YES for need and NO for no need
53   Whether newchat_integration endpoint works, YES for work and NO for don't work
55   Whether using the COPEN command requires masterkey, YES for require and NO for don't require
57   Whether begin CBEDATA header is required, YES for require and NO for do not require
59   Whether to use HTTP or HTTPS in relevant spots. 'http' for HTTP, 'https' for HTTPS.
61   Whether clients that support it should use PercentAutoencode, YES for use and NO for do not use
63   Whether XEDIT accepts WILDCARD-ALL, YES for accept and NO for do not accept
65   Whether custom commands through sendmsg are enabled. YES for on and NO for off
67   Allow pre-exc for custom cmds, for 67-71, YES for allow and NO for forbid
69   Allow mid-exc for custom cmds
71   Allow post-exc for custom cmds
73   Whether nonmaster users can issue LOCK ADD/DEL commands
75   Whether to enable UIDUKEY lockout (YES/NO)
77   Whether CSEND is enabled (YES/NO)
79   Structure of a message with timestamps, name and msg. Use %time, %date, %name, and %mess to refer to different values. ###
81   Structure of a message with timestamps and message, excluding %name.###
83   Structure of a message with name and message, excluding %time and %date.###
85   Structure of a message with only message excluding %time, %date, %name.###
87   Max size of a message thru GET in bytes or chars
89   Whether to count message size in bytes or chars.
91   Max size of a message thru POST in bytes or chars.
93   The recovery chatbox where the recovery code must be entered
95   The recovery password
97   Whether the recovery procedure can run
99   The time allotted to the user to enter the recovery code.
101  Commands that can only be ran with the admin password and not UID/UKEY. Note that some commands already have no-cbauth
policies. check PIDs 51,55,73,41.
--CBauth--
To add someone to the CBauth list, use this format:

#::Alias::Password::Permissions;

Number is the UID. This is the ID that users have.
Alias is the name that is tied to the UID.
Password (a.k.a. the UKEY) is the password tied to the UID,
Permissions is the permission level this user has (either sudo or notsudo). This will change in a future update.

CBauth is used to verify certain usernames when sending messages and issuing Terminal/Edit (TerminEdit) commands.
For issuing TerminEdit commands, use the UID and UKEY slots to verify your identity (and don't enter the password that TerminEdit commands usually want).
For sending messages with a protected username (or to provide any endpoint with UID/UKEY), add uid=UID&ukey=UKEY to the request URL.
username. If you try to use a protected username without the proper credentials the request will fail.

--FILESAFE--

To protect a file from unauthorised writing add;
FILENAME::PERMISSION::

Filename is the file you want to protect from writing, and permission is who can write.
Permission has three levels: login, sudo and local.

login: users must be logged in (with a UID/UKEY)
sudo: users must be logged in as a sudo account
local: users cannot write to the file at all

--MAINLOOKUP--

This is the only hardcoded part of Chatbox Engine that still exists.
In each subdir and sitechats dir, open mainlookup.php and replace "C:/wamp64/www/textengine/sitechats/.htamainpolicy" with the filepath to your .htamainpolicy file.

Notes:
1. Make sure to credit me and others by linking to credits.cbedata.
2. Make sure your server protects all files ending in '.hta'
3. (**) from earlier: use %ip to show where you would put the IP to ban
4. (*) from earlier: this does not bypass server limit for file uploads
5. (###) from earlier: use %id to replace the used UID (applies to all of them).

--CCMD--
Let's say you want to support image sending but you don't want the stupid inchat-div client. You can use Custom Commands (but you have to build your own image sending functionality by yourself). Every time a message is sent sendmsg checks if a string is in / is the beginning of the message.
To add or delete these events, use the terminal. Use the help command and see .htamainpoilcy for more info.

@Event;Condition;String;Includepath

Event is the point in execution of sendmsg that you want CCMD to work.

@Pre is before almost all execution, @Mid is after UID.UKEY checking but before message send, @Pst is after all execution.
Condition has two values: HAS and BEGINSWITH. HAS is 'if msg contains [str]', BEGINSWITH is 'if msg startswith [str]'.
String is [str] to check for from earlier.
Includepath is the PHP script to call upon when triggered by the condition and [str].

--UIDUKEY LOCKOUT--
Lock someone out: [chatbox no.] deny from [int: UID]
Use lock add to lock someone out and lock del to unlock.
WILDCARD-ALL to lock out the entire server for that UID.

--CLIENTS--
Chatbox Engine comes prepackaged with a client designed for text-based communication, however, clients have can have other purposes.
You could have a conversation like regular people in one chatbox while another chatbox is remote controlling a remote computer. 

There is no way to differentiate between Chatboxes with different purposes on the server side (the closest thing being "cipher::NO, cipher::YES for hs chatboxes").

Most people seem to think this software is only for chatting. This is w r o n g. There are hundreds of other things you could use a CBE server for.