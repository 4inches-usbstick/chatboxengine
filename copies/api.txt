<api docs>
The Chatbox Engine API

Currently, there are seven endpoints, six explained here, all using HTTP GET (except for sendmsg_integration_nobreak_post):

terminalprocess.php (remote management terminal)
adminedits.php (editing terminal)
sendmsg_integration.php (send message).
sendmsg_integration_nobreak.php (send message without auto newline placement)
sendmsg_integration_nobreak_post.php (POST instead of GET for sendmsg)
newchat_integration.php (open a Chatbox)
display.php (get Chatbox contents)
/data/datacall.php (parse CBEDATA, explained in cbedata.txt)



--TO USE THE API--
Use the file name of the endpoint (i.e. adminedits), along with any other arguments that the endpoint takes. Then, issue a GET request for your URL.
Note that there may be CORS conflict issues, especially if the "Access-Control-Allow-Headers: *" wildcard is not accepted.


--AN EXAMPLE--
http://71.255.240.10:8080/textengine/sitechats/sendmsg_integration.php?write=0002&encode=UTF-8&msg=BEEEEEEES&namer=&rurl=norefer
Making a GET request for this should send this information to the server:

write=0002
msg=BEEEEEEES
encode=UTF-8

The URL tells the server what to do, in this case, write the message "BEEEEEEES" to Chatbox 0002 while using the UTF8 encoder.


The API also allows you to get Chatboxes and their contents. 
You just make an HTTP GET request for <ip>:<port-number>/textengine/sitechats/<chatbox-number>.[file-extension].
If you are accessing it from another domain (with XMLHTTPREQUEST for example), you're going to need to go through display.php.
Use <ip>:<port-number>/textengine/sitechats/display.php?chatbox=<chatbox-number>.[file-extension] if using display.php.

For CBEDATA API, see cbedata.txt.




--WHAT ARGUMENTS ARE NEEDED FOR EACH ENDPOINTS--

sendmsg_integration (all types): write, msg (optional: namer, encoder). write is the destination Chatbox, msg is the message, encode is the encoder to use, and namer is the alias to go under.

*Note that sendmsg_integration_nobreak_post takes HTTP POST instead of HTTP GET

terminal_process: cmd, params (optional: pass). cmd is the command, params is the argument, pass is the password. pass is necessary to execute some but not all commands.

newchat_integration: newname, option, allowmed. newname is the new Chatbox name, option is the type of Chatbox to open, and allowmed is the allowmedia option (more in detail later).

adminedits: cb, gro, rw, key. cb is the Chatbox, gro is the string to get rid of, rw is the replacement string, and key is the password.

display: chatbox. chatbox is the chatbox to read.


--NEWCHAT_INTEGRATION--
For the option and allowmed values, there are wrong answers (you have to use certain values).

option: l, h or d. l is for legacy chatbox, h is for html chatbox, and d is for cbedata chatbox.
allowmed: allowmed, or forbidmed. one of these allows media upload, the other does not. you figure it out.

--RETURN VALUES--
Like most APIs, all endpoints return a value when called upon. Unlike most APIs, you're not supposed to use these return values.
The only use for these return values is error-catching: if an error pops up it will be reflected in the return value. The exception to this rule is display.php (it gives back the contents of a Chatbox).

--USING UID/UKEY--
UID/UKEY (CBauth) allows users to gain special priviledges, such as a reserved username and sudo powers. This currently only works with sendmsg, adminedit and terminal. If you want to use CBauth for those three endpoints, add '&uid=<UID>&ukey=<UKEY>' to your API request, and leave any password or key arguments empty.

--ERROR REPORTING--
If an error occurs and the operation was halted, the string 'Stop:' will appear in the return value. The one exception is with terminalprocess, where Auth-Warning will appear if you provided inadequate authorization but that did not stop execution.

There are now error codes: if an error pops up it will be in this syntax: [err:ERRCODE] or [warn:ERRCODE] if the Stop: is only a warning.

Error codes and what they mean
1 executionpoint error (internal error)
2 checkcondition error (internal error)
3 file IO error (internal error)
4 API lockdown status
5 This Chatbox Does Not Actuaully Exist
6 Forbidden string
7 Forbidden chatbox destination
8 Protected file
9 Local level needed
10 Sudo level needed
11 This UID is locked out
12 HTTP POST for sendmsg is disabled
13 403 Forbidden
14 404 Not Found
15 Reserved, not used
16 No/incorrect auth
17 Newchat disabled
18 This file exists already
19 This filename is illegal
20 This user level cannot edit
21 Not high enough user authorization
22 Reserved, not used
23 UID/UKEY is not acceptable and masterkey is needed
24 begin CBEDATA is on strict mode
25 No data type
26 .htamainpolicy stopped execution
27 Payload too large on HTTP POST
28 No media dir to work with
29 .htaterminalaccess stopped execution
30 User did not exist in first place (UID DEL)
31 Failure to delete (unknown error)
32 LOADEXE command stopped (unknown error)
33 Generic Authorization Error