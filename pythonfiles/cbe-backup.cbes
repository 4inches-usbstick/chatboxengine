::.htaloaderpolicy::
##WRITE##
ZGVmYXVsdGVuY29kZXI9dXRmLTg7Y29weXBhc3RlZGVsYXk9MTU7DQpUaGlzIGlzIGEgcG9saWN5IHBhZ2UgdGhhdCBvdXRsaW5lcyBob3cgdGhlIHNpZGVsb2FkZXIgc2hvdWxkIHdvcmsuDQpOb3RlIHRoYXQgdGhlIGRlZmF1bHQgZW5jb2RlciByZWFsbHkgb25seSBhcHBsaWVzIHRvIHRoZSBub25iaW5hcnkgZmlsZXMu
##

::cbedata.py::
##WRITE##
DQojU0VUVVANCmltcG9ydCByZXF1ZXN0cyBhcyBycQ0KDQoNCg0KI09GRkxJTkUgUE9SVElPTg0KDQoNCiNvZmZsaW5lIGludGVycHJldGVyLCBnZXQtaW5mbw0KZGVmIGdldF9vZmZsaW5lKHN0LCBwYXRoLCB0eSk6DQogICAgcGF0aGxpc3QgPSBwYXRoLnNwbGl0KCctJykNCiAgICBjb250ZW50cyA9IHN0DQoNCiAgICANCiAgICBvZmZzZXQgPSAwDQogICAgYyA9IDANCiAgICBvZmZzZXRzID0gW10NCiAgICBvayA9IDENCiAgICANCiAgICB3aGlsZSBjIDwgbGVuKHBhdGhsaXN0KSAtIDE6DQogICAgICAgIGkgPSBwYXRobGlzdFswXQ0KICAgICAgICBzdHIoaSkNCiAgICAgICAgd3RmID0gJ2NsYXNzWycraQ0KICAgICAgICBvZmZzZXQgPSBjb250ZW50cy5maW5kKHd0ZiwgaW50KG9mZnNldCksIGxlbihjb250ZW50cykpDQogICAgICAgICNwcmludChvZmZzZXQpDQogICAgDQogICAgICAgIHBhdGhsaXN0LnBvcCgwKQ0KICAgICAgICAjcHJpbnQocGF0aGxpc3QpDQoNCg0KICAgICNpZiB0aGUgcGF0aCBpcyBpbnZhbGlkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bg0KDQogICAgbGluZWFmdGVyID0gY29udGVudHMuZmluZCgnXScsaW50KG9mZnNldCksbGVuKGNvbnRlbnRzKSkNCiAgICBzdWJjbGFzcyA9IGNvbnRlbnRzW2ludChvZmZzZXQpOmludChsaW5lYWZ0ZXIpOjFdDQoNCiAgICBzdWJjbGFzc19pbmRleF9zdCA9IHN1YmNsYXNzLmZpbmQoc3RyKHBhdGhsaXN0WzBdKSsnPT0nKQ0KICAgIHN1YmNsYXNzX2luZGV4X2V0ID0gc3ViY2xhc3MuZmluZCgnOycsc3ViY2xhc3NfaW5kZXhfc3QsbGVuKHN1YmNsYXNzKSkNCiAgICB2YXJpYWJsZV8wID0gc3ViY2xhc3NbaW50KHN1YmNsYXNzX2luZGV4X3N0KTppbnQoc3ViY2xhc3NfaW5kZXhfZXQpOjFdDQoNCiAgICB2YXIxID0gdmFyaWFibGVfMC5zcGxpdCgnPT0nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICBpZiB0eSA9PSAnY2xzJzoNCiAgICAgICAgcmV0dXJuKHN1YmNsYXNzKQ0KDQogICAgaWYgdHkgPT0gJ3Zhcic6DQogICAgICAgIHJldHVybihzdHIodmFyMVswXSkrJz09JytzdHIodmFyMVsxXSkpDQoNCiAgICBpZiB0eSA9PSAndmFsJzoNCiAgICAgICAgcmV0dXJuKHZhcjFbMV0pDQoNCiAgICBpZiB0eSA9PSAncmF3JzoNCiAgICAgICAgcmV0dXJuKGNvbnRlbnRzKQ0KDQoNCg0KDQojb2ZmbGluZSBpbnRlcnByZXRlciwgZ2V0LWluZm8gd2l0aCBvYmplY3QgY3JlYXRpb24NCmRlZiBnZXRfb2ZmbGluZV9vYmooc3QsIHBhdGgsIHR5KToNCg0KICAgIHBhdGhsaXN0ID0gcGF0aC5zcGxpdCgnLScpDQogICAgDQogICAgY29udGVudHMgPSBzdA0KDQogICAgDQogICAgb2Zmc2V0ID0gMA0KICAgIGMgPSAwDQogICAgb2Zmc2V0cyA9IFtdDQogICAgb2sgPSAxDQogICAgDQogICAgd2hpbGUgYyA8IGxlbihwYXRobGlzdCkgLSAxOg0KICAgICAgICBpID0gcGF0aGxpc3RbY10NCiAgICAgICAgc3RyKGkpDQogICAgICAgIHd0ZiA9ICdjbGFzc1snK2kNCiAgICAgICAgb2Zmc2V0ID0gY29udGVudHMuZmluZCh3dGYsIGludChvZmZzZXQpLCBsZW4oY29udGVudHMpKQ0KICAgICAgICBjID0gYyArIDENCiAgICAgICAgI3ByaW50KG9mZnNldCkNCiAgICANCiAgICAgICAgI3BhdGhsaXN0LnBvcCgwKQ0KICAgICAgICAjcHJpbnQocGF0aGxpc3QpDQoNCg0KICAgICNpZiB0aGUgcGF0aCBpcyBpbnZhbGlkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bg0KDQogICAgbGluZWFmdGVyID0gY29udGVudHMuZmluZCgnXScsaW50KG9mZnNldCksbGVuKGNvbnRlbnRzKSkNCiAgICBzdWJjbGFzcyA9IGNvbnRlbnRzW2ludChvZmZzZXQpOmludChsaW5lYWZ0ZXIgKyAxKToxXQ0KICAgIG51bSA9IGxlbihwYXRobGlzdCkgLSAyDQoNCiAgICBvZmZzZXRfYWZ0ZXIgPSBzdWJjbGFzcy5maW5kKCdjbGFzc1snK3N0cihwYXRobGlzdFtjIC0gMV0pKyc+JykNCiAgICBsZW5ndGggPSBsZW4oJ2NsYXNzWycrc3RyKHBhdGhsaXN0W2MgLSAxXSkrJz4nKQ0KICAgIG5ld19zdWIgPSBjb250ZW50c1tpbnQob2Zmc2V0ICsgbGVuZ3RoKTpsaW5lYWZ0ZXI6MV0NCg0KICAgIGlmIHR5ID09ICdyYXcnOg0KICAgICAgICByZXR1cm4gbmV3X3N1Yg0KDQogICAgaWYgdHkgPT0gJ2xpc3QtdmFsJzoNCiAgICAgICAgbmV3X3N1YiA9IG5ld19zdWIucmVwbGFjZSgiXG4iLCAiIikNCiAgICAgICAgYXR0cmliZSA9IG5ld19zdWIuc3BsaXQoJzsnKQ0KICAgICAgICBvdXRwdXQgPSBbXQ0KDQogICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihhdHRyaWJlKSAtIDEpOg0KICAgICAgICAgICAgaSA9IGF0dHJpYmVbaV0NCiAgICAgICAgICAgIHN0cihpKQ0KICAgICAgICAgICAgI2kgPSBpLnJlcGxhY2UoIjsiLCAiIikNCiAgICAgICAgICAgIHRtcHYxID0gaS5zcGxpdCgnPT0nKQ0KICAgICAgICAgICAgI3RtcHYxLnBvcCgwKQ0KICAgICAgICAgICAgI3ByaW50KHRtcHYxKQ0KICAgICAgICAgICAgb3V0cHV0LmFwcGVuZCh0bXB2MVsxXSkNCg0KICAgICAgICByZXR1cm4gb3V0cHV0DQoNCiAgICBpZiB0eSA9PSAnbGlzdC1rZXknOg0KICAgICAgICBuZXdfc3ViID0gbmV3X3N1Yi5yZXBsYWNlKCJcbiIsICIiKQ0KICAgICAgICBhdHRyaWJlID0gbmV3X3N1Yi5zcGxpdCgnOycpDQogICAgICAgIG91dHB1dCA9IFtdDQoNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgbGVuKGF0dHJpYmUpIC0gMSk6DQogICAgICAgICAgICBpID0gYXR0cmliZVtpXQ0KICAgICAgICAgICAgc3RyKGkpDQogICAgICAgICAgICAjaSA9IGkucmVwbGFjZSgiOyIsICIiKQ0KICAgICAgICAgICAgdG1wdjEgPSBpLnNwbGl0KCc9PScpDQogICAgICAgICAgICAjdG1wdjEucG9wKDApDQogICAgICAgICAgICAjcHJpbnQodG1wdjEpDQogICAgICAgICAgICBvdXRwdXQuYXBwZW5kKHRtcHYxWzBdKQ0KDQogICAgICAgIHJldHVybiBvdXRwdXQNCg0KICAgIGlmIHR5ID09ICdkaWMnOg0KICAgICAgICBuZXdfc3ViID0gbmV3X3N1Yi5yZXBsYWNlKCJcbiIsICIiKQ0KICAgICAgICBhdHRyaWJlID0gbmV3X3N1Yi5zcGxpdCgnOycpDQogICAgICAgIG91dHB1dCA9IHt9DQoNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgbGVuKGF0dHJpYmUpIC0gMSk6DQogICAgICAgICAgICBpID0gYXR0cmliZVtpXQ0KICAgICAgICAgICAgc3RyKGkpDQogICAgICAgICAgICAjaSA9IGkucmVwbGFjZSgiOyIsICIiKQ0KICAgICAgICAgICAgdG1wdjEgPSBpLnNwbGl0KCc9PScpDQogICAgICAgICAgICAjdG1wdjEucG9wKDApDQogICAgICAgICAgICAjcHJpbnQodG1wdjEpDQogICAgICAgICAgICBvdXRwdXRbdG1wdjFbMF1dID0gdG1wdjFbMV0NCg0KICAgICAgICByZXR1cm4gb3V0cHV0DQoNCg0KDQoNCg0KDQoNCg==
##

::cbediscord::
##WRITE##
DQpjYmUtaXAtcGxhY2Vob2xkZXI9PT1ib3QtdG9rZW4tcGxhY2Vob2xkZXINCg==
##

::cbe_discord.py::
##WRITE##

##

::cbe_fordistro.py::
##WRITE##

##

::cbe_terminal.py::
##WRITE##
DQojdGhpcyBpcyB0aGUgcHl0aG9uIHZlcnNpb24gb2YgdGhlIHRlcm1pbmFsDQppcCA9ICI3MS4yNTUuMjQwLjEwOjgwODAiDQpwcmludCgiQ2hhdGJveCBFbmdpbmUgVGVybWluYWwgZm9yIFB5dGhvbi4gVHlwZSBweXRlcm0taGVscCBmb3Igc3BlY2lhbCBoZWxwIChjb21tYW5kcyBzcGVjaWZpYyB0byB0aGlzIHRlcm1pbmFsKSwgYW5kIGhlbHAgZm9yIENCRSBjb21tYW5kcy4iKQ0KcHJpbnQoIlVzZSBVSUQ6OlVLRVkgdG8gcmVwbGFjZSB0aGUgcGFzc3dvcmQgd2l0aCBsb2dpbiBpbmZvLiIpDQpwcmludCgiVGhlIGRlZmF1bHQgSVAgaXM6ICIgKyBpcCkNCndoaWxlIFRydWU6DQoNCiAgICBpbXBvcnQgcmVxdWVzdHMgYXMgcmVxdWVzdHMNCiAgICBpbXBvcnQgdGltZQ0KICAgICAgIA0KICAgIGRlZiBzZW5kX2NvbW1hbmQoY29tbWFuZCwgcGFyYW1zLCBrZXkpOg0KICAgICAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKQ0KICAgICAgICBpZiAnOjonIG5vdCBpbiBrZXk6DQogICAgICAgICAgICBwcmludCgnaHR0cDovLycraXArJy90ZXh0ZW5naW5lL3NpdGVjaGF0cy90ZXJtaW5hbHByb2Nlc3MucGhwP2NtZD0nK2NvbW1hbmQrJyZwYXJhbXM9JytwYXJhbXMrJyZwYXNzPScra2V5KQ0KICAgICAgICAgICAgeDEgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly8nK2lwKycvdGV4dGVuZ2luZS9zaXRlY2hhdHMvdGVybWluYWxwcm9jZXNzLnBocD9jbWQ9Jytjb21tYW5kKycmcGFyYW1zPScrcGFyYW1zKycmcGFzcz0nK2tleSkNCiAgICAgICAgICAgIHJldHVybiB4MS50ZXh0DQogICAgICAgIGVsaWYgJzo6JyBpbiBrZXk6DQogICAgICAgICAgICBzdHVmZiA9IGtleS5zcGxpdCgnOjonKQ0KICAgICAgICAgICAgcHJpbnQoJ2h0dHA6Ly8nK2lwKycvdGV4dGVuZ2luZS9zaXRlY2hhdHMvdGVybWluYWxwcm9jZXNzLnBocD9jbWQ9Jytjb21tYW5kKycmcGFyYW1zPScrcGFyYW1zKycmcGFzcz0nK2tleSsnJnVpZD0nK3N0cihzdHVmZlswXSkrJyZ1a2V5PScrc3RyKHN0dWZmWzFdKSkNCiAgICAgICAgICAgIHgxID0gcmVxdWVzdHMuZ2V0KCdodHRwOi8vJytpcCsnL3RleHRlbmdpbmUvc2l0ZWNoYXRzL3Rlcm1pbmFscHJvY2Vzcy5waHA/Y21kPScrY29tbWFuZCsnJnBhcmFtcz0nK3BhcmFtcysnJnBhc3M9JytrZXkrJyZ1aWQ9JytzdHIoc3R1ZmZbMF0pKycmdWtleT0nK3N0cihzdHVmZlsxXSkpDQogICAgICAgICAgICByZXR1cm4geDEudGV4dA0KICAgIA0KICAgIGRlZiBzZW5kX2VkaXQocGF0aCwgZmluZCwgcmVwbGFjZSwga2V5KToNCiAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikNCiAgICAgICAgaWYgJzo6JyBub3QgaW4ga2V5Og0KICAgICAgICAgICAgcHJpbnQoJ2h0dHA6Ly8nK2lwKycvdGV4dGVuZ2luZS9zaXRlY2hhdHMvYWRtaW5lZGl0cy5waHA/Y2I9JytwYXRoKycmZ3JvPScrZmluZCsnJnJ3PScrcmVwbGFjZSsnJmtleT0nK2tleSkNCiAgICAgICAgICAgIHgxID0gcmVxdWVzdHMuZ2V0KCdodHRwOi8vJytpcCsnL3RleHRlbmdpbmUvc2l0ZWNoYXRzL2FkbWluZWRpdHMucGhwP2NiPScrcGF0aCsnJmdybz0nK2ZpbmQrJyZydz0nK3JlcGxhY2UrJyZrZXk9JytrZXkpDQogICAgICAgICAgICByZXR1cm4geDEudGV4dA0KICAgICAgICBlbGlmICc6OicgaW4ga2V5Og0KICAgICAgICAgICAgc3R1ZmYgPSBrZXkuc3BsaXQoJzo6JykNCiAgICAgICAgICAgIHByaW50KCdodHRwOi8vJytpcCsnL3RleHRlbmdpbmUvc2l0ZWNoYXRzL2FkbWluZWRpdHMucGhwP2NiPScrcGF0aCsnJmdybz0nK2ZpbmQrJyZydz0nK3JlcGxhY2UrJyZrZXk9JytrZXkrJyZ1aWQ9JytzdHIoc3R1ZmZbMF0pKycmdWtleT0nK3N0cihzdHVmZlsxXSkpDQogICAgICAgICAgICB4MSA9IHJlcXVlc3RzLmdldCgnaHR0cDovLycraXArJy90ZXh0ZW5naW5lL3NpdGVjaGF0cy9hZG1pbmVkaXRzLnBocD9jYj0nK3BhdGgrJyZncm89JytmaW5kKycmcnc9JytyZXBsYWNlKycma2V5PScra2V5KycmdWlkPScrc3RyKHN0dWZmWzBdKSsnJnVrZXk9JytzdHIoc3R1ZmZbMV0pKQ0KICAgICAgICAgICAgcmV0dXJuIHgxLnRleHQNCiAgICANCiAgICBkZWYgc2VuZF9uZXdjbWQobnVtYmVyLCBhbGxvd21lZCwgb3B0aW9uKToNCiAgICAgICAgIHRoZXVybCA9ICJodHRwOi8vNzEuMjU1LjI0MC4xMDo4MDgwL3RleHRlbmdpbmUvc2l0ZWNoYXRzL25ld2NoYXRfaW50ZWdyYXRpb24ucGhwP25ld25hbWU9IitudW1iZXIrIiZvcHRpb249IitvcHRpb24rIiZhbGxvd21lZD0iK2FsbG93bWVkKyImcnVybD1ub3JlZmVyIjsNCiAgICAgICAgIHdyaXRlID0gcmVxdWVzdHMuZ2V0KHRoZXVybCkNCiAgICAgICAgIHJldHVybiB3cml0ZS50ZXh0DQogICAgICAgICANCiAgICBkZWYgbmV3X2NiKG5ld25hbWUsIG9wdGlvbiwgYWxsb3dtZWQpOg0KICAgICAgICB0aGV1cmkgPSAnaHR0cDovLzcxLjI1NS4yNDAuMTA6ODA4MC90ZXh0ZW5naW5lL3NpdGVjaGF0cy9uZXdjaGF0X2ludGVncmF0aW9uLnBocD9uZXduYW1lPScrbmV3bmFtZSsnJm9wdGlvbj0nK29wdGlvbisnJmFsbG93bWVkPScrYWxsb3dtZWQrJyZydXJsPW5vcmVmZXInDQogICAgICAgIG91dHB1dCA9IHJlcXVlc3RzLmdldCh0aGV1cmkpDQogICAgICAgIHJldHVybiBvdXRwdXQudGV4dA0KICAgDQogICAgY29tbWFuZGkgPSBzdHIoaW5wdXQoIj4+PiAiKSkNCiAgICBwYXJhbXNpID0gc3RyKGlucHV0KCI+ICIpKQ0KICAgIGtleWkgPSBzdHIoaW5wdXQoIj4gIikpDQogICAgI3ByaW50KCdodHRwOi8vJytpcCsnL3RleHRlbmdpbmUvc2l0ZWNoYXRzL3Rlcm1pbmFscHJvY2Vzcy5waHA/Y21kPScrY29tbWFuZCsnJnBhcmFtcz0nK3BhcmFtcysnJmtleT0nK2tleSkNCiAgICANCiAgICBpZiBjb21tYW5kaSA9PSAiZWRpdCI6DQogICAgICAgIHJlcGxhY2VpID0gc3RyKGlucHV0KCI+ICIpKQ0KICAgICAgICBlZGl0a2V5ID0gc3RyKGlucHV0KCI+ICIpKQ0KICAgICAgICBvdXQgPSBzZW5kX2VkaXQocGFyYW1zaSwga2V5aSwgcmVwbGFjZWksIGVkaXRrZXkpDQogICAgICAgIHByaW50KG91dCkNCiAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikNCiAgICBlbGlmIGNvbW1hbmRpID09ICJzZW5kIjoNCiAgICAgICAgcmVwbGFjZWkgPSBzdHIoaW5wdXQoIj4gIikpDQogICAgICAgIGVkaXRrZXkgPSBzdHIoaW5wdXQoIj4gIikpDQogICAgICAgIHByaW50KCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpDQogICAgICAgICNwcmludCgiaHR0cDovLyIraXArIiJtc2c9IiArIHBhcmFtc2kgKyAiJndyaXRlPSIgKyBrZXlpICsgIiZydXJsPW5vcmVmZXImbmFtZXI9IiArIHJlcGxhY2VpICsgIiZlbmNvZGVyPSIpDQogICAgICAgIG91dF9zZW5kID0gcmVxdWVzdHMuZ2V0KCJodHRwOi8vIitpcCsiL3RleHRlbmdpbmUvc2l0ZWNoYXRzL3NlbmRtc2dfaW50ZWdyYXRpb24ucGhwPyIgKyAibXNnPSIgKyBwYXJhbXNpICsgIiZ3cml0ZT0iICsga2V5aSArICImcnVybD1ub3JlZmVyJm5hbWVyPSIgKyByZXBsYWNlaSArICImZW5jb2Rlcj0iICsgZWRpdGtleSkNCiAgICAgICAgcHJpbnQob3V0X3NlbmQudGV4dCkNCiAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikNCiAgICBlbGlmIGNvbW1hbmRpID09ICJweXRlcm0taGVscCI6DQogICAgICAgIHByaW50KCJTZW5kaW5nIHJlZ3VsYXIgdGVybWluYWwgY29tbWFuZHM6IGp1c3QgZW50ZXIgdGhlIGNvbW1hbmQsIHRoZSBwYXJhbWV0ZXIsIHRoZW4gdGhlIGtleS4gRm9yIGVkaXQsIGVudGVyIHRoZSBlZGl0IGNvbW1hbmQsIHRoZSBwYXRoLCB0aGUgZmluZHN0ciwgdGhlIHJlcGxhY2V3aXRoc3RyLCBhbmQgdGhlIGtleSAoYWxsIGFyZ3VtZW50cyBuZWNlc3NhcnkpLiBGb3IgdGhlIHNlbmQgY29tbWFuZCwgdHlwZSBpbiB0aGUgc2VuZCBjb21tYW5kLCB0aGUgbWVzc2FnZSwgdGhlIHBhdGgsIHRoZSBuYW1lLCBhbmQgdGhlIGVuY29kZXIuIChtZXNzYWdlIGFuZCBwYXRoIGFyZ3VtZW50cyBuZWNlc3NhcnkpLiBZb3UgY2FuIG1ha2UgYSByZWd1bGFyIEdFVCByZXF1ZXN0IHdpdGggZXhlLXB5LiBUeXBlIGluIHRoZSBjb21tYW5kLCB0aGVuIHRoZSBVUkwgdG8gR0VULiBjaGFuZ2UtaXAgdG8gY2hhbmdlIHRoZSBJUCBvZiB0aGUgc2VydmVyIHlvdSB3YW50IHRvIGNvbm5lY3QgdG8uIFRoaXMgbmVlZHMgdG8gYmUgYW4gSVAgdGhhdCBpcyBDQkUgY29uZmlndXJlZC4gRW50ZXIgdGhlIGNvbW1hbmQsIHRoZW4gdGhlIElQICh3aXRoIHBvcnQgbnVtYmVyKS4gRm9yIHdyaXRlLCBlbnRlciB0aGUgY29tbWFuZCwgdGhlIG5ldyBjaGF0Ym94IG51bWJlciwgdGhlIGFsbG93bWVkIChhbGxvd21lZC9mb3JiaWRtZWQpIGRpcmVjdGl2ZSwgYW5kIHRoZSBuZXcgY2hhdGJveCBkaXJlY3RpdmUgKGx8aHxkKS4gIikNCiAgICBlbGlmIGNvbW1hbmRpID09ICJleGl0IjoNCiAgICAgICAgZXhpdCgpDQogICAgZWxpZiBjb21tYW5kaSA9PSAiY2hhbmdlLWlwIjoNCiAgICAgICAgaXAgPSBwYXJhbXNpDQogICAgICAgIHByaW50KCJUaGUgY3VycmVudCBJUCBpczogIiArIGlwKQ0KICAgIGVsaWYgY29tbWFuZGkgPT0gImV4ZS1weSI6DQogICAgICAgIGJvaSA9IHJlcXVlc3RzLmdldChwYXJhbXNpKQ0KICAgICAgICBwcmludChib2kudGV4dCkNCiAgICBpZiBjb21tYW5kaSA9PSAid3JpdGUiOg0KICAgICAgICByZXBsYWNlaSA9IHN0cihpbnB1dCgiPiAiKSkNCiAgICAgICAgb3V0ID0gc2VuZF9uZXdjbWQocGFyYW1zaSwga2V5aSwgcmVwbGFjZWkpDQogICAgICAgIHByaW50KG91dCkNCiAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikNCiAgICBlbHNlOg0KICAgICAgICBvdXQxID0gc2VuZF9jb21tYW5kKGNvbW1hbmRpLCBwYXJhbXNpLCBrZXlpKQ0KICAgICAgICBwcmludChvdXQxKQ0KICAgICAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKQ0KICAgICAgICANCiAgICAgICANCiAgICAgICAgDQogICAgICAgIA0KDQo=
##

::chatboxengine.py::
##WRITE##

##

::cli-loader.py::
##WRITE##
aW1wb3J0IHJlcXVlc3RzIGFzIHJxDQppbXBvcnQgdGltZSBhcyB0DQppbXBvcnQgb3MNCnRvbG9hZCA9ICcnDQpzdHJpID0gJycNCm5hbWVzID0gW10NCmYxID0gMQ0KZjIgPSAyDQpwYXRob3JpZ2luID0gW10NCmYgPSBvcGVuKCcuaHRhbG9hZGVycG9saWN5JywgJ3InKQ0KdGhpbmdzID0gZi5yZWFkKCkNCnRoaW5nID0gdGhpbmdzLnNwbGl0KCc7JykNCmYuY2xvc2UoKQ0KDQplbmNvZGVyID0gdGhpbmdbMF0uc3BsaXQoJz0nKQ0KZW5jb2RlID0gZW5jb2RlclsxXQ0KDQpjcGRhID0gdGhpbmdbMV0uc3BsaXQoJz0nKQ0KY3BkID0gY3BkYVsxXQ0KDQppZiB0b2xvYWQgPT0gJyc6DQogICAgdG9sb2FkID0gaW5wdXQoJ2xvYWRmaWxlPiAnKQ0KICAgIA0KaWYgJ2h0dHA6Ly8nIGluIHRvbG9hZDoNCiAgICBwcmludCgnQXR0ZW1wdGluZyB0byByZXRyaWV2ZSBsb2FkIG92ZXIgSFRUUC4uLicpDQogICAgdHJ5Og0KICAgICAgICBuZXdSZXF1ZXN0ID0gcnEuZ2V0KHRvbG9hZCwgdGltZW91dD0zMCkNCiAgICAgICAgc3RyaSA9IG5ld1JlcXVlc3QudGV4dA0KICAgIGV4Y2VwdDoNCiAgICAgICAgcHJpbnQoJ0V4Y2VwdGlvbiB3aGlsZSByZXRyaWV2aW5nIGxvYWQnKQ0KICAgICAgICB0LnNsZWVwKDUpDQogICAgICAgIGV4aXQoKQ0KZWxzZToNCiAgICBwcmludCgnQXR0ZW1wdGluZyB0byBsb2FkIHRoZSBsb2FkIGxvY2FsbHkuLi4nKQ0KICAgIGYgPSBvcGVuKHRvbG9hZCwgJ3InKQ0KICAgIHN0cmkgPSBmLnJlYWQoKQ0KICAgIGYuY2xvc2UoKQ0KICAgIA0KbGlzdG9mdGhpbmdzID0gc3RyKHN0cmkpLnNwbGl0KCc6OicpDQptZXRhZGF0YSA9IGxpc3RvZnRoaW5nc1swXQ0KI3ByaW50KGxpc3RvZnRoaW5ncykNCg0KcHJpbnQoJycpDQpwcmludCgnQ01EICAgICBBUkcnKQ0KcHJpbnQoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpDQp3aGlsZSBmMiA8PSBsZW4obGlzdG9mdGhpbmdzKToNCiAgICAjcHJpbnQobGlzdG9mdGhpbmdzW2YxXSkNCiAgICAjcHJpbnQobGlzdG9mdGhpbmdzW2YyXSkNCiAgICBpZiAnI01LRElSIycgaW4gbGlzdG9mdGhpbmdzW2YyXToNCiAgICAgICAgcGF0aG9yaWdpbi5jbGVhcigpDQogICAgICAgIGxpc3RvZnRoaW5nc1tmMl0gPSBsaXN0b2Z0aGluZ3NbZjJdLnJlcGxhY2UoJ1xuJywnJykNCiAgICAgICAgcGFyZW50ID0gb3MuZ2V0Y3dkKCkNCiAgICAgICAgcGF0aG9yaWdpbiA9IHN0cihsaXN0b2Z0aGluZ3NbZjJdKS5zcGxpdCgnIyMnKQ0KICAgICAgICBwYXRoID0gb3MucGF0aC5qb2luKHBhcmVudCwgcGF0aG9yaWdpblsyXSkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgb3MubWtkaXIocGF0aCkNCiAgICAgICAgICAgIHByaW50KCdNS0RJUiAnICsgcGF0aCkNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgcHJpbnQoJ01LRElSIEV4Y2VwdGlvbiB3aGlsZSBjcmVhdGluZyBkaXJlY3RvcnknKQ0KICAgIGVsaWYgJyNDSERJUiMnIGluIGxpc3RvZnRoaW5nc1tmMl06DQogICAgICAgIHBhdGhvcmlnaW4uY2xlYXIoKQ0KICAgICAgICBsaXN0b2Z0aGluZ3NbZjJdID0gbGlzdG9mdGhpbmdzW2YyXS5yZXBsYWNlKCdcbicsJycpDQogICAgICAgIHBhcmVudCA9IG9zLmdldGN3ZCgpDQogICAgICAgIHBhdGhvcmlnaW4gPSBzdHIobGlzdG9mdGhpbmdzW2YyXSkuc3BsaXQoJyMjJykNCiAgICAgICAgcGF0aCA9IG9zLnBhdGguam9pbihwYXJlbnQsIHBhdGhvcmlnaW5bMl0pDQogICAgICAgIG9zLmNoZGlyKHBhdGgpDQogICAgICAgIHByaW50KCdDSERJUiAnK3BhdGgpDQogICAgZWxpZiAnI1dSSVRFIycgaW4gbGlzdG9mdGhpbmdzW2YyXToNCiAgICAgICAgcGF0aG9yaWdpbi5jbGVhcigpDQogICAgICAgIHBhdGhvcmlnaW4gPSBzdHIobGlzdG9mdGhpbmdzW2YyXSkuc3BsaXQoJyMjJykNCiAgICAgICAgZiA9IG9wZW4obGlzdG9mdGhpbmdzW2YxXSwgJ3cnLCBlbmNvZGluZz1lbmNvZGUpDQogICAgICAgIHBhdGhvcmlnaW5bMl0gPSBwYXRob3JpZ2luWzJdLnJlcGxhY2UoJyVjJywnOicpDQogICAgICAgIHBhdGhvcmlnaW5bMl0gPSBwYXRob3JpZ2luWzJdLnJlcGxhY2UoJyVkJywnOjonKQ0KICAgICAgICBwYXRob3JpZ2luWzJdID0gcGF0aG9yaWdpblsyXS5yZXBsYWNlKCclaCcsJyMnKQ0KICAgICAgICBwYXRob3JpZ2luWzJdID0gcGF0aG9yaWdpblsyXS5yZXBsYWNlKCclaicsJyMjJykNCiAgICAgICAgZi53cml0ZShwYXRob3JpZ2luWzJdKQ0KICAgICAgICAjcHJpbnQoYnl0ZXMocGF0aG9yaWdpblsyXSwgJ3V0Zi04JykpDQogICAgICAgIGYuY2xvc2UoKQ0KICAgICAgICBuYW1lcy5hcHBlbmQobGlzdG9mdGhpbmdzW2YxXSkNCiAgICAgICAgcHJpbnQoJ1dSSVRFICcrbGlzdG9mdGhpbmdzW2YxXSkNCiAgICBlbGlmICcjREVCVUcjJyBpbiBsaXN0b2Z0aGluZ3NbZjJdOg0KICAgICAgICBwYXRob3JpZ2luID0gc3RyKGxpc3RvZnRoaW5nc1tmMl0pLnNwbGl0KCcjIycpDQogICAgICAgIHByaW50KCdERUJVRycpDQogICAgZWxpZiAnI1JNT0JKIycgaW4gbGlzdG9mdGhpbmdzW2YyXToNCiAgICAgICAgcGF0aG9yaWdpbiA9IHN0cihsaXN0b2Z0aGluZ3NbZjJdKS5zcGxpdCgnIyMnKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBvcy5yZW1vdmUocGF0aG9yaWdpblsyXSkNCiAgICAgICAgICAgIHByaW50KCdSTU9CSiAnK3BhdGhvcmlnaW5bMl0pDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHByaW50KCdSTU9CSiBFeGNlcHRpb24gd2hpbGUgcmVtb3ZpbmcgZmlsZScpDQogICAgZWxpZiAnI1JNRElSIycgaW4gbGlzdG9mdGhpbmdzW2YyXToNCiAgICAgICAgcGF0aG9yaWdpbiA9IHN0cihsaXN0b2Z0aGluZ3NbZjJdKS5zcGxpdCgnIyMnKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBvcy5ybWRpcihwYXRob3JpZ2luWzJdKQ0KICAgICAgICAgICAgcHJpbnQoJ1JNRElSICcrcGF0aG9yaWdpblsyXSkNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgcHJpbnQoJ1JNRElSIEV4Y2VwdGlvbiB3aGlsZSByZW1vdmluZyBkaXJlY3RvcnknKQ0KICAgIGVsaWYgJyNCTEFTVCMnIGluIGxpc3RvZnRoaW5nc1tmMl06DQogICAgICAgIHBhdGhvcmlnaW4gPSBzdHIobGlzdG9mdGhpbmdzW2YyXSkuc3BsaXQoJyMjJykNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBwcmludCgnQkxBU1QgLT4nKQ0KICAgICAgICAgICAgbGlzdG9nID0gb3MubGlzdGRpcihwYXRob3JpZ2luWzJdKQ0KICAgICAgICAgICAgZm9yIGkgaW4gbGlzdG9nOg0KICAgICAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKGkpOg0KICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUoaSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyAgICBSZW1vdmVkOiAnK3N0cihpKSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgnICAgIFNraXBwZWQ6ICcrc3RyKGkpKQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBwcmludCgnQkxBU1QgRXhjZXB0aW9uIHdoaWxlIGJsYXN0aW5nIGRpcmVjdG9yeScpDQogICAgICAgICAgICAgICAgDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJ05PQ01EICcrbGlzdG9mdGhpbmdzW2YxXSkNCg0KICAgICNwcmludChsaXN0b2Z0aGluZ3MpDQogICAgI3ByaW50KGkpDQoNCiAgICBmMiA9IGYyKzINCiAgICBmMSA9IGYxKzINCiAgICAjdC5zbGVlcCgwLjEpDQpwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykNCnByaW50KCdJbnN0YWxsYXRpb24gY29tcGxldGUsIGV4aXRpbmcgaW4gJytzdHIoY3BkKSsnIHNlY29uZHMnKQ0KdC5zbGVlcChpbnQoY3BkKSkNCmV4aXQoKQ0KI2lucHV0KCkNCg==
##

::cli-zipper.py::
##WRITE##
aW1wb3J0IG9zDQp3cml0ZXRvID0gaW5wdXQoJ2Rlc3RpbnktZmlsZT4nKQ0KcGFyZW50ID0gaW5wdXQoJ3BhcmVudGRpcj4nKQ0KDQpmID0gb3BlbignLmh0YWxvYWRlcnBvbGljeScsICdyJykNCnRoaW5ncyA9IGYucmVhZCgpDQp0aGluZyA9IHRoaW5ncy5zcGxpdCgnOycpDQpmLmNsb3NlKCkNCg0KZW5jb2RlciA9IHRoaW5nWzBdLnNwbGl0KCc9JykNCmVuY29kZSA9IGVuY29kZXJbMV0NCnByaW50KGVuY29kZSkNCmRlZiBvbmV4ZWN1dGUobG9hZGZpbGUsIHN0cmkpOg0KICAgIGYgPSBvcGVuKGxvYWRmaWxlLCAnYScpDQogICAgZi53cml0ZShzdHIoc3RyaSkpDQogICAgZi5jbG9zZSgpDQogICAgcmV0dXJuIE5vbmUNCiAgICAjc28gaWYgd2UgY2FuJ3Qgd3JpdGUgd2UgY2FuIGp1c3QgZ28gaGVyZSBhbmQgdXNlIGEgZnVuY3Rpb24gdG8gd3JpdGUNCg0KZGVmIGxvb2socGFyZW50X2RpciwgbG9hZGZpbGUsIGVuY29kZXIpOg0KICAgIGZpbGVzID0gb3MubGlzdGRpcihwYXJlbnRfZGlyKQ0KICAgIG9zLmNoZGlyKHBhcmVudF9kaXIpDQogICAgZGlyc2ZvcmxhdGVyID0gW10NCiAgICAjZXdyaXRlID0gb3Blbihsb2FkZmlsZSwgJ3cnKQ0KICAgIHByaW50KHBhcmVudF9kaXIpDQogICAgZm9yIGkgaW4gZmlsZXM6DQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKHBhcmVudF9kaXIgKyAnLycgKyBpKToNCiAgICAgICAgICAgIGYgPSBvcGVuKGksICdyJywgZW5jb2Rpbmc9ZW5jb2RlcikNCiAgICAgICAgICAgIGNvbnRlbnRzID0gZi5yZWFkKCkNCiAgICAgICAgICAgIGYuY2xvc2UoKQ0KICAgICAgICAgICAgY29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKCc6JywgJyVjJykNCiAgICAgICAgICAgIGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZSgnOjonLCAnJWQnKQ0KICAgICAgICAgICAgY29udGVudHMgPSBjb250ZW50cy5yZXBsYWNlKCcjJywgJyVoJykNCiAgICAgICAgICAgIGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZSgnIyMnLCAnJWonKQ0KICAgICAgICAgICAgb25leGVjdXRlKGxvYWRmaWxlLCAnOjonK2krJzo6XG4nKQ0KICAgICAgICAgICAgb25leGVjdXRlKGxvYWRmaWxlLCAnIyNXUklURSMjXG4nKQ0KICAgICAgICAgICAgb25leGVjdXRlKGxvYWRmaWxlLCBzdHIoY29udGVudHMpKQ0KICAgICAgICAgICAgb25leGVjdXRlKGxvYWRmaWxlLCAnXG4jI1xuXG4nKQ0KICAgICAgICAgICAgcHJpbnQoJ1dSSVRFOiAnK3N0cihpKSkNCiAgICAgICAgICAgICNvbmV4ZWN1dGUoKQ0KICAgICAgICBlbGlmIG9zLnBhdGguaXNkaXIocGFyZW50X2RpciArICcvJyArIGkpIGFuZCBpICE9ICcuZ2l0JzoNCiAgICAgICAgICAgIHByaW50KCdESVI6ICcrc3RyKGkpKQ0KICAgICAgICAgICAgZGlyc2ZvcmxhdGVyLmFwcGVuZChpKQ0KICAgIGZvciBpIGluIGRpcnNmb3JsYXRlcjoNCiAgICAgICAgb25leGVjdXRlKGxvYWRmaWxlLCAnOjonKydNSycrJzo6XG4nKQ0KICAgICAgICBvbmV4ZWN1dGUobG9hZGZpbGUsICcjI01LRElSIyMnICsgcGFyZW50X2RpciArICcvJyArIHN0cihpKSArICcjI1xuXG4nKQ0KICAgICAgICBvbmV4ZWN1dGUobG9hZGZpbGUsICc6OicrJ0NEJysnOjpcbicpDQogICAgICAgIG9uZXhlY3V0ZShsb2FkZmlsZSwgJyMjQ0hESVIjIycgKyBwYXJlbnRfZGlyICsgJy8nICsgc3RyKGkpICsgJyMjXG5cbicpDQogICAgICAgIHByaW50KHBhcmVudF9kaXIgKyAnLycgKyBpKQ0KICAgICAgICBvcy5jaGRpcihwYXJlbnRfZGlyICsgJy8nICsgaSkNCiAgICAgICAgbG9vayhwYXJlbnRfZGlyICsgJy8nICsgaSwgbG9hZGZpbGUsIGVuY29kZXIpDQogICAgICAgIG9zLmNoZGlyKHBhcmVudF9kaXIpDQogICAgI2V3cml0ZS5jbG9zZSgpDQogICAgICAgIA0KbG9vayhwYXJlbnQsIHdyaXRldG8sIGVuY29kZSkNCg==
##

